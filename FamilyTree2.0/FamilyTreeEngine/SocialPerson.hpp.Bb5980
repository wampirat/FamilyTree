#pragma once

#include "Person.hpp"
#include "Family.h"
#include <memory>
#include <vector>
#include <iostream>
#include <algorithm>

using FamilyPtr = std::weak_ptr<Family>;
using Families = std::vector<FamilyPtr>;
        
class SocialPerson 
{
public:
    SocialPerson() noexcept 
        : person(std::make_shared<Person>())
    {
    }

    SocialPerson(const SocialPerson& orig) noexcept
    {
        posterityWidth = orig.posterityWidth;
        ancestorsWidth = orig.ancestorsWidth;
        person = orig.person;
        personsFamilies = orig.personsFamilies;
    }

    SocialPerson(Person p) noexcept
    {
        setPerson(p);
    }

    SocialPerson& operator=(const SocialPerson& orig)
    {
        posterityWidth = orig.posterityWidth;
        ancestorsWidth = orig.ancestorsWidth;
        person = orig.person;
        personsFamilies = orig.personsFamilies;
        return *this;
    }

    auto getName() const noexcept
    {
        return person->getName();
    }

    auto getSurname() const noexcept
    {
        return person->getSurname();
    }

    auto getBirthdate() const noexcept
    {
        return person->getBirthdate();
    }

    auto getDeathdate() const noexcept
    {
        return person->getDeathdate();
    }

    auto getIsAlive() const noexcept
    {
        return person->getIsAlive();
    }

    auto getPlace() const noexcept
    {
        return person->getPlace();
    }

    auto getPerson() const noexcept
    {
        return person;
    }
    void setPerson(Person  p) noexcept
    {
        person = std::make_shared<Person>(p);
    }
        
    auto operator*() const noexcept
    {
        return person;
    }
    
    std::shared_ptr<Person> operator->() const noexcept
    {
        return person;
    }
    
    std::shared_ptr<Person> get() const noexcept
    {
        return person;
    }
   
    auto getNumOfRelatedFamilies() const noexcept
    {
        return personsFamilies.size();
    }
    
    void addRelatedFamily(FamilyPtr f) noexcept
    {
        personsFamilies.push_back(f);
    }
    
    bool isMember(FamilyPtr f) const noexcept
    {
        if (auto ff = f.lock())
        {
            for (const auto& e : personsFamilies)
            {
                if (e.lock() == ff) return true;
            }
        }
        return false;
    }
    Families getRelatedFamilies() const noexcept
    {
        return personsFamilies;
    }

    auto getKids() noexcept
    {
        auto retval = People();
        for (const auto& e : personsFamilies)
        {
            if (auto family = e.lock())
            {
                if (family->isPartner(*this))
                {
                    auto kids = family->getKids();
                    retval.insert(retval.end(), kids.begin(), kids.end());
                }
            }
        }
        return retval;
    }

    auto getParents() noexcept
    {
        auto retval = People();
        for (const auto& e : personsFamilies)
        {
            if (auto family = e.lock())
            {
                if (family->isKid(*this))
                {
                    auto parents = family->getPartners();
                    retval.insert(retval.end(), parents.begin(), parents.end());
                }
            }
        }
        return retval;
    }
    
    auto getPartners() noexcept
    {
        auto retval = People();
        for (const auto& e : personsFamilies)
        {
            if (auto family = e.lock())
            {
                if (family->isPartner(*this))
                {
                    const auto& partners = family->getPartners();
                    
                    for (const auto& p : partners)
                    {
                        if (*p == person) continue;
                        retval.push_back(p);
                    }
                }
            }
        }
        return retval;
    }
    
    auto getAncestors() const noexcept
    {
        
    }
    
    auto getSiblings() const noexcept
    {
        People retval;
        for (const auto& e : personsFamilies)
        {
            if (auto family = e.lock())
            {
                if (family->isKid(*this))
                {
                    const auto& partners = family->getKids();
                    
                    for (const auto& p : partners)
                    {
                        if (*p == person) continue;
                        retval.push_back(p);
                    }
                    return retval;
                }
            }
        }
        return retval;
    }
    
    bool operator==(const SocialPerson& p) const
    {
        return person == p.person;
    }
    
    bool operator==(const std::shared_ptr<Person>& p) const
    {
        return person == p;
    }

    int calcPosterityWidth()
    {
        int posterityWidth = 0;
        for (const std::shared_ptr<SocialPerson>& kid : this->getKids())
        {
            posterityWidth += kid->calcPosterityWidth();
        }
        posterityWidth = std::max(posterityWidth, 1 + static_cast<int>(getPartners().size()));
        return posterityWidth;
    }

    int calcAncestorsDepth()
    {
        auto parents = getParents();
        int depth = 0;
        for (const auto& parent : parents)
        {
            depth = std::max(depth, parent->calcAncestorsDepth() + 1);
        }
        return depth;
    }

    int calcPosterityDepth()
    {
        auto kids = getKids();
        int depth = 0;
        for (const auto& kid : kids)
        {
            depth = std::max(depth, kid->calcPosterityDepth() + 1);
        }
        return depth;
    }

    int getPosterityWidth()
    {
        return posterityWidth;
    }

    int calcAncestorsWidth()
    {
        int ancestorsWidth = 0;
        for (const std::shared_ptr<SocialPerson>& parent : this->getParents())
        {
            ancestorsWidth += parent->calcAncestorsWidth();
        }
        ancestorsWidth = (std::max(ancestorsWidth, 1 + static_cast<int>(getSiblings().size())));
        return ancestorsWidth;
    }

    int getAncestorsWidth()
    {
        return ancestorsWidth;
    }

    int getDepth()
    {
        return depth;
    }

private:
    int posterityWidth = 0;
    int ancestorsWidth = 0;
    int depth = 0;
    std::shared_ptr<Person> person;
    Families personsFamilies;
};


